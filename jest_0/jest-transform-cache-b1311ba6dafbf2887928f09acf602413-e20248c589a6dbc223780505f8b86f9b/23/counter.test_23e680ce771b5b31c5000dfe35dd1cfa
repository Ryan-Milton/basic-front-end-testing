9745b8123478c47127a5e4ed0ded428c
"use strict";

var _interopRequireDefault = require("/home/ryan/CodeFellows/401/basic-front-end-testing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _counter = _interopRequireDefault(require("../../../../../src/components/counter/counter.js"));

var _jsxFileName = "/home/ryan/CodeFellows/401/basic-front-end-testing/src/__tests__/src/components/counter/counter.test.js";
describe('<Counter />', () => {
  describe('It\'s time to count up!', () => {
    it('counts up', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        },
        __self: void 0
      }));
      let countUp = app.find('.up-clicker');
      countUp.simulate('click');
      let result = app.find('span');
      expect(result.text()).toBe('1');
    });
    it('counts up to 5', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 18
        },
        __self: void 0
      }));
      let countUp = app.find('.up-clicker');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      let result = app.find('span');
      expect(result.text()).toBe('5');
    });
  });
  describe(`It's time to count down!`, () => {
    it('counts down', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        },
        __self: void 0
      }));
      let countDown = app.find('.down-clicker');
      countDown.simulate('click');
      let result = app.find('span');
      expect(result.text()).toBe('-1');
    });
    it('counts down to -5', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        },
        __self: void 0
      }));
      let countDown = app.find('.down-clicker');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      let result = app.find('span');
      expect(result.text()).toBe('-5');
    });
  });
  describe(`It's time to count up AND down!`, () => {
    it('counts down to -2 then up to 1', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        },
        __self: void 0
      }));
      let countUp = app.find('.up-clicker');
      let countDown = app.find('.down-clicker');
      countDown.simulate('click');
      countDown.simulate('click');
      let result = app.find('span');
      expect(result.text()).toBe('-2');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      expect(result.text()).toBe('1');
    });
    it('counts down to -7 then up to 0', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        },
        __self: void 0
      }));
      let countUp = app.find('.up-clicker');
      let countDown = app.find('.down-clicker');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      countDown.simulate('click');
      let result = app.find('span');
      expect(result.text()).toBe('-7');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      countUp.simulate('click');
      expect(result.text()).toBe('0');
    });
  });
  describe(`We're checking the state of the app`, () => {
    it('should have a state.count of -1 and a state.polarity of negative', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        },
        __self: void 0
      }));
      let countDown = app.find('.down-clicker');
      countDown.simulate('click');
      let state = app.state();
      expect(state.count).toEqual(-1);
      expect(state.polarity).toBe('negative');
    });
    it('should have a state.count of 1 and a state.polarity of positive', () => {
      let app = mount(_react.default.createElement(_counter.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 109
        },
        __self: void 0
      }));
      let countUp = app.find('.up-clicker');
      countUp.simulate('click');
      let state = app.state();
      expect(state.count).toEqual(1);
      expect(state.polarity).toBe('positive');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,