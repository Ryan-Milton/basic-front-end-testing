{"version":3,"sources":["counter.test.js"],"names":["describe","it","app","mount","countUp","find","simulate","result","expect","text","toBe","countDown","state","count","toEqual","polarity"],"mappings":";;;;AAAA;;AAEA;;;AAEAA,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAE5BA,EAAAA,QAAQ,CAAC,yBAAD,EAA4B,MAAM;AAExCC,IAAAA,EAAE,CAAC,WAAD,EAAc,MAAM;AACpB,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAAS,aAAT,CAAd;AACAD,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAAS,MAAT,CAAb;AACAG,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,GAA3B;AACD,KANC,CAAF;AAQAT,IAAAA,EAAE,CAAC,gBAAD,EAAmB,MAAM;AACzB,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAAS,aAAT,CAAd;AACAD,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAAS,MAAT,CAAb;AACAG,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,GAA3B;AACD,KAVC,CAAF;AAaD,GAvBO,CAAR;AAyBAV,EAAAA,QAAQ,CAAE,0BAAF,EAA6B,MAAM;AAEzCC,IAAAA,EAAE,CAAC,aAAD,EAAgB,MAAM;AACtB,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIQ,SAAS,GAAGT,GAAG,CAACG,IAAJ,CAAS,eAAT,CAAhB;AACAM,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAAS,MAAT,CAAb;AACAG,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,IAA3B;AACD,KANC,CAAF;AAQAT,IAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC5B,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIQ,SAAS,GAAGT,GAAG,CAACG,IAAJ,CAAS,eAAT,CAAhB;AACAM,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAAS,MAAT,CAAb;AACAG,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,IAA3B;AACD,KAVC,CAAF;AAYD,GAtBO,CAAR;AAwBAV,EAAAA,QAAQ,CAAE,iCAAF,EAAoC,MAAM;AAEhDC,IAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACzC,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAAS,aAAT,CAAd;AACA,UAAIM,SAAS,GAAGT,GAAG,CAACG,IAAJ,CAAS,eAAT,CAAhB;AACAM,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAAS,MAAT,CAAb;AACAG,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,IAA3B;AACAN,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAE,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,GAA3B;AACD,KAZC,CAAF;AAcAT,IAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACzC,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAAS,aAAT,CAAd;AACA,UAAIM,SAAS,GAAGT,GAAG,CAACG,IAAJ,CAAS,eAAT,CAAhB;AACAM,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACAK,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAAS,MAAT,CAAb;AACAG,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,IAA3B;AACAN,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAF,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACAE,MAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,EAAD,CAAN,CAAsBC,IAAtB,CAA2B,GAA3B;AACD,KArBC,CAAF;AAuBD,GAvCO,CAAR;AAyCAV,EAAAA,QAAQ,CAAE,qCAAF,EAAwC,MAAM;AAEpDC,IAAAA,EAAE,CAAC,kEAAD,EAAqE,MAAM;AAC3E,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIQ,SAAS,GAAGT,GAAG,CAACG,IAAJ,CAAS,eAAT,CAAhB;AACAM,MAAAA,SAAS,CAACL,QAAV,CAAmB,OAAnB;AACA,UAAIM,KAAK,GAAGV,GAAG,CAACU,KAAJ,EAAZ;AACAJ,MAAAA,MAAM,CAACI,KAAK,CAACC,KAAP,CAAN,CAAoBC,OAApB,CAA4B,CAAC,CAA7B;AACAN,MAAAA,MAAM,CAACI,KAAK,CAACG,QAAP,CAAN,CAAuBL,IAAvB,CAA4B,UAA5B;AACD,KAPC,CAAF;AASAT,IAAAA,EAAE,CAAC,iEAAD,EAAoE,MAAM;AAC1E,UAAIC,GAAG,GAAGC,KAAK,CAAC,6BAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACA,UAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAAS,aAAT,CAAd;AACAD,MAAAA,OAAO,CAACE,QAAR,CAAiB,OAAjB;AACA,UAAIM,KAAK,GAAGV,GAAG,CAACU,KAAJ,EAAZ;AACAJ,MAAAA,MAAM,CAACI,KAAK,CAACC,KAAP,CAAN,CAAoBC,OAApB,CAA4B,CAA5B;AACAN,MAAAA,MAAM,CAACI,KAAK,CAACG,QAAP,CAAN,CAAuBL,IAAvB,CAA4B,UAA5B;AACD,KAPC,CAAF;AASD,GApBO,CAAR;AAwBD,CApHO,CAAR","sourcesContent":["import React from 'react';\n// import renderer from 'react-test-renderer';\nimport Counter from '../../../../../src/components/counter/counter.js';\n\ndescribe('<Counter />', () => {\n\n  describe('It\\'s time to count up!', () => {\n\n    it('counts up', () => {\n      let app = mount(<Counter />);\n      let countUp = app.find('.up-clicker');\n      countUp.simulate('click');\n      let result = app.find('span');\n      expect(result.text()).toBe('1');\n    });\n\n    it('counts up to 5', () => {\n      let app = mount(<Counter />);\n      let countUp = app.find('.up-clicker');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      let result = app.find('span');\n      expect(result.text()).toBe('5');\n    });\n\n  \n  });\n\n  describe(`It's time to count down!`, () => {\n\n    it('counts down', () => {\n      let app = mount(<Counter />);\n      let countDown = app.find('.down-clicker');\n      countDown.simulate('click');\n      let result = app.find('span');\n      expect(result.text()).toBe('-1');\n    });\n\n    it('counts down to -5', () => {\n      let app = mount(<Counter />);\n      let countDown = app.find('.down-clicker');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      let result = app.find('span');\n      expect(result.text()).toBe('-5');\n    });\n\n  });\n\n  describe(`It's time to count up AND down!`, () => {\n\n    it('counts down to -2 then up to 1', () => {\n      let app = mount(<Counter />);\n      let countUp = app.find('.up-clicker');\n      let countDown = app.find('.down-clicker');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      let result = app.find('span');\n      expect(result.text()).toBe('-2');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      expect(result.text()).toBe('1');\n    });\n\n    it('counts down to -7 then up to 0', () => {\n      let app = mount(<Counter />);\n      let countUp = app.find('.up-clicker');\n      let countDown = app.find('.down-clicker');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      countDown.simulate('click');\n      let result = app.find('span');\n      expect(result.text()).toBe('-7');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      countUp.simulate('click');\n      expect(result.text()).toBe('0');\n    });\n\n  });\n\n  describe(`We're checking the state of the app`, () => {\n\n    it('should have a state.count of -1 and a state.polarity of negative', () => {\n      let app = mount(<Counter />);\n      let countDown = app.find('.down-clicker');\n      countDown.simulate('click');\n      let state = app.state();\n      expect(state.count).toEqual(-1);\n      expect(state.polarity).toBe('negative');\n    });\n\n    it('should have a state.count of 1 and a state.polarity of positive', () => {\n      let app = mount(<Counter />);\n      let countUp = app.find('.up-clicker');\n      countUp.simulate('click');\n      let state = app.state();\n      expect(state.count).toEqual(1);\n      expect(state.polarity).toBe('positive');\n    });\n\n  });\n\n  \n\n});"]}